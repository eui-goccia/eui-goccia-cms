/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-sqlite";
import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  text,
  numeric,
  integer,
} from "@payloadcms/db-sqlite/drizzle/sqlite-core";
import { sql, relations } from "@payloadcms/db-sqlite/drizzle";
import { randomUUID } from "crypto";

export const images = sqliteTable(
  "images",
  {
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    blurHash: text("blur_hash"),
    prefix: text("prefix").default("images"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    url: text("url"),
    thumbnailURL: text("thumbnail_u_r_l"),
    filename: text("filename"),
    mimeType: text("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
    sizes_thumbnail_url: text("sizes_thumbnail_url"),
    sizes_thumbnail_width: numeric("sizes_thumbnail_width"),
    sizes_thumbnail_height: numeric("sizes_thumbnail_height"),
    sizes_thumbnail_mimeType: text("sizes_thumbnail_mime_type"),
    sizes_thumbnail_filesize: numeric("sizes_thumbnail_filesize"),
    sizes_thumbnail_filename: text("sizes_thumbnail_filename"),
    sizes_medium_url: text("sizes_medium_url"),
    sizes_medium_width: numeric("sizes_medium_width"),
    sizes_medium_height: numeric("sizes_medium_height"),
    sizes_medium_mimeType: text("sizes_medium_mime_type"),
    sizes_medium_filesize: numeric("sizes_medium_filesize"),
    sizes_medium_filename: text("sizes_medium_filename"),
    sizes_large_url: text("sizes_large_url"),
    sizes_large_width: numeric("sizes_large_width"),
    sizes_large_height: numeric("sizes_large_height"),
    sizes_large_mimeType: text("sizes_large_mime_type"),
    sizes_large_filesize: numeric("sizes_large_filesize"),
    sizes_large_filename: text("sizes_large_filename"),
    sizes_xlarge_url: text("sizes_xlarge_url"),
    sizes_xlarge_width: numeric("sizes_xlarge_width"),
    sizes_xlarge_height: numeric("sizes_xlarge_height"),
    sizes_xlarge_mimeType: text("sizes_xlarge_mime_type"),
    sizes_xlarge_filesize: numeric("sizes_xlarge_filesize"),
    sizes_xlarge_filename: text("sizes_xlarge_filename"),
    sizes_og_url: text("sizes_og_url"),
    sizes_og_width: numeric("sizes_og_width"),
    sizes_og_height: numeric("sizes_og_height"),
    sizes_og_mimeType: text("sizes_og_mime_type"),
    sizes_og_filesize: numeric("sizes_og_filesize"),
    sizes_og_filename: text("sizes_og_filename"),
  },
  (columns) => ({
    images_updated_at_idx: index("images_updated_at_idx").on(columns.updatedAt),
    images_created_at_idx: index("images_created_at_idx").on(columns.createdAt),
    images_filename_idx: uniqueIndex("images_filename_idx").on(
      columns.filename,
    ),
    images_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      "images_sizes_thumbnail_sizes_thumbnail_filename_idx",
    ).on(columns.sizes_thumbnail_filename),
    images_sizes_medium_sizes_medium_filename_idx: index(
      "images_sizes_medium_sizes_medium_filename_idx",
    ).on(columns.sizes_medium_filename),
    images_sizes_large_sizes_large_filename_idx: index(
      "images_sizes_large_sizes_large_filename_idx",
    ).on(columns.sizes_large_filename),
    images_sizes_xlarge_sizes_xlarge_filename_idx: index(
      "images_sizes_xlarge_sizes_xlarge_filename_idx",
    ).on(columns.sizes_xlarge_filename),
    images_sizes_og_sizes_og_filename_idx: index(
      "images_sizes_og_sizes_og_filename_idx",
    ).on(columns.sizes_og_filename),
  }),
);

export const images_locales = sqliteTable(
  "images_locales",
  {
    caption: text("caption").notNull(),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("images_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [images.id],
      name: "images_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const users_sessions = sqliteTable(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    createdAt: text("created_at").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    expiresAt: text("expires_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    _orderIdx: index("users_sessions_order_idx").on(columns._order),
    _parentIDIdx: index("users_sessions_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const users = sqliteTable(
  "users",
  {
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    email: text("email").notNull(),
    resetPasswordToken: text("reset_password_token"),
    resetPasswordExpiration: text("reset_password_expiration").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    salt: text("salt"),
    hash: text("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: text("lock_until").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const posts_blocks_text = sqliteTable(
  "posts_blocks_text",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "top",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("left"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("posts_blocks_text_order_idx").on(columns._order),
    _parentIDIdx: index("posts_blocks_text_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("posts_blocks_text_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts.id],
      name: "posts_blocks_text_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const posts_blocks_text_locales = sqliteTable(
  "posts_blocks_text_locales",
  {
    content: text("content"),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "posts_blocks_text_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts_blocks_text.id],
      name: "posts_blocks_text_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const posts_blocks_rich_text = sqliteTable(
  "posts_blocks_rich_text",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "top",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("left"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("posts_blocks_rich_text_order_idx").on(columns._order),
    _parentIDIdx: index("posts_blocks_rich_text_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("posts_blocks_rich_text_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts.id],
      name: "posts_blocks_rich_text_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const posts_blocks_rich_text_locales = sqliteTable(
  "posts_blocks_rich_text_locales",
  {
    content: text("content", { mode: "json" }),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "posts_blocks_rich_text_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts_blocks_rich_text.id],
      name: "posts_blocks_rich_text_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const posts_blocks_quote = sqliteTable(
  "posts_blocks_quote",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "bottom",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("right"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("posts_blocks_quote_order_idx").on(columns._order),
    _parentIDIdx: index("posts_blocks_quote_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("posts_blocks_quote_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts.id],
      name: "posts_blocks_quote_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const posts_blocks_quote_locales = sqliteTable(
  "posts_blocks_quote_locales",
  {
    content: text("content", { mode: "json" }),
    author: text("author"),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "posts_blocks_quote_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts_blocks_quote.id],
      name: "posts_blocks_quote_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const posts_blocks_image = sqliteTable(
  "posts_blocks_image",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    image: text("image_id").references(() => images.id, {
      onDelete: "set null",
    }),
    width: text("width", { enum: ["full", "half", "third"] }).default("full"),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "center",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("center"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("posts_blocks_image_order_idx").on(columns._order),
    _parentIDIdx: index("posts_blocks_image_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("posts_blocks_image_path_idx").on(columns._path),
    posts_blocks_image_image_idx: index("posts_blocks_image_image_idx").on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts.id],
      name: "posts_blocks_image_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const posts_blocks_grid = sqliteTable(
  "posts_blocks_grid",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("posts_blocks_grid_order_idx").on(columns._order),
    _parentIDIdx: index("posts_blocks_grid_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("posts_blocks_grid_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts.id],
      name: "posts_blocks_grid_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const posts = sqliteTable(
  "posts",
  {
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    coverImage: text("cover_image_id").references(() => images.id, {
      onDelete: "set null",
    }),
    author: text("author_id").references(() => authors.id, {
      onDelete: "set null",
    }),
    publishedAt: text("published_at").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    slug: text("slug"),
    slugLock: integer("slug_lock", { mode: "boolean" }).default(true),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    _status: text("_status", { enum: ["draft", "published"] }).default("draft"),
  },
  (columns) => ({
    posts_cover_image_idx: index("posts_cover_image_idx").on(
      columns.coverImage,
    ),
    posts_author_idx: index("posts_author_idx").on(columns.author),
    posts_slug_idx: index("posts_slug_idx").on(columns.slug),
    posts_updated_at_idx: index("posts_updated_at_idx").on(columns.updatedAt),
    posts_created_at_idx: index("posts_created_at_idx").on(columns.createdAt),
    posts__status_idx: index("posts__status_idx").on(columns._status),
  }),
);

export const posts_locales = sqliteTable(
  "posts_locales",
  {
    title: text("title"),
    description: text("description"),
    meta_title: text("meta_title"),
    meta_image: text("meta_image_id").references(() => images.id, {
      onDelete: "set null",
    }),
    meta_description: text("meta_description"),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    posts_meta_meta_image_idx: index("posts_meta_meta_image_idx").on(
      columns.meta_image,
      columns._locale,
    ),
    _localeParent: uniqueIndex("posts_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts.id],
      name: "posts_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v_blocks_text = sqliteTable(
  "_posts_v_blocks_text",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "top",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("left"),
    _uuid: text("_uuid"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_posts_v_blocks_text_order_idx").on(columns._order),
    _parentIDIdx: index("_posts_v_blocks_text_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_posts_v_blocks_text_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_blocks_text_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v_blocks_text_locales = sqliteTable(
  "_posts_v_blocks_text_locales",
  {
    content: text("content"),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "_posts_v_blocks_text_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v_blocks_text.id],
      name: "_posts_v_blocks_text_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v_blocks_rich_text = sqliteTable(
  "_posts_v_blocks_rich_text",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "top",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("left"),
    _uuid: text("_uuid"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_posts_v_blocks_rich_text_order_idx").on(columns._order),
    _parentIDIdx: index("_posts_v_blocks_rich_text_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_posts_v_blocks_rich_text_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_blocks_rich_text_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v_blocks_rich_text_locales = sqliteTable(
  "_posts_v_blocks_rich_text_locales",
  {
    content: text("content", { mode: "json" }),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "_posts_v_blocks_rich_text_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v_blocks_rich_text.id],
      name: "_posts_v_blocks_rich_text_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v_blocks_quote = sqliteTable(
  "_posts_v_blocks_quote",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "bottom",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("right"),
    _uuid: text("_uuid"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_posts_v_blocks_quote_order_idx").on(columns._order),
    _parentIDIdx: index("_posts_v_blocks_quote_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_posts_v_blocks_quote_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_blocks_quote_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v_blocks_quote_locales = sqliteTable(
  "_posts_v_blocks_quote_locales",
  {
    content: text("content", { mode: "json" }),
    author: text("author"),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "_posts_v_blocks_quote_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v_blocks_quote.id],
      name: "_posts_v_blocks_quote_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v_blocks_image = sqliteTable(
  "_posts_v_blocks_image",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    image: text("image_id").references(() => images.id, {
      onDelete: "set null",
    }),
    width: text("width", { enum: ["full", "half", "third"] }).default("full"),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "center",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("center"),
    _uuid: text("_uuid"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_posts_v_blocks_image_order_idx").on(columns._order),
    _parentIDIdx: index("_posts_v_blocks_image_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_posts_v_blocks_image_path_idx").on(columns._path),
    _posts_v_blocks_image_image_idx: index(
      "_posts_v_blocks_image_image_idx",
    ).on(columns.image),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_blocks_image_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v_blocks_grid = sqliteTable(
  "_posts_v_blocks_grid",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    _uuid: text("_uuid"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_posts_v_blocks_grid_order_idx").on(columns._order),
    _parentIDIdx: index("_posts_v_blocks_grid_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_posts_v_blocks_grid_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_blocks_grid_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v = sqliteTable(
  "_posts_v",
  {
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    parent: text("parent_id").references(() => posts.id, {
      onDelete: "set null",
    }),
    version_coverImage: text("version_cover_image_id").references(
      () => images.id,
      {
        onDelete: "set null",
      },
    ),
    version_author: text("version_author_id").references(() => authors.id, {
      onDelete: "set null",
    }),
    version_publishedAt: text("version_published_at").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_slug: text("version_slug"),
    version_slugLock: integer("version_slug_lock", { mode: "boolean" }).default(
      true,
    ),
    version_updatedAt: text("version_updated_at").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_createdAt: text("version_created_at").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version__status: text("version__status", {
      enum: ["draft", "published"],
    }).default("draft"),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    snapshot: integer("snapshot", { mode: "boolean" }),
    publishedLocale: text("published_locale", { enum: ["en", "it"] }),
    latest: integer("latest", { mode: "boolean" }),
    autosave: integer("autosave", { mode: "boolean" }),
  },
  (columns) => ({
    _posts_v_parent_idx: index("_posts_v_parent_idx").on(columns.parent),
    _posts_v_version_version_cover_image_idx: index(
      "_posts_v_version_version_cover_image_idx",
    ).on(columns.version_coverImage),
    _posts_v_version_version_author_idx: index(
      "_posts_v_version_version_author_idx",
    ).on(columns.version_author),
    _posts_v_version_version_slug_idx: index(
      "_posts_v_version_version_slug_idx",
    ).on(columns.version_slug),
    _posts_v_version_version_updated_at_idx: index(
      "_posts_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _posts_v_version_version_created_at_idx: index(
      "_posts_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _posts_v_version_version__status_idx: index(
      "_posts_v_version_version__status_idx",
    ).on(columns.version__status),
    _posts_v_created_at_idx: index("_posts_v_created_at_idx").on(
      columns.createdAt,
    ),
    _posts_v_updated_at_idx: index("_posts_v_updated_at_idx").on(
      columns.updatedAt,
    ),
    _posts_v_snapshot_idx: index("_posts_v_snapshot_idx").on(columns.snapshot),
    _posts_v_published_locale_idx: index("_posts_v_published_locale_idx").on(
      columns.publishedLocale,
    ),
    _posts_v_latest_idx: index("_posts_v_latest_idx").on(columns.latest),
    _posts_v_autosave_idx: index("_posts_v_autosave_idx").on(columns.autosave),
  }),
);

export const _posts_v_locales = sqliteTable(
  "_posts_v_locales",
  {
    version_title: text("version_title"),
    version_description: text("version_description"),
    version_meta_title: text("version_meta_title"),
    version_meta_image: text("version_meta_image_id").references(
      () => images.id,
      {
        onDelete: "set null",
      },
    ),
    version_meta_description: text("version_meta_description"),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _posts_v_version_meta_version_meta_image_idx: index(
      "_posts_v_version_meta_version_meta_image_idx",
    ).on(columns.version_meta_image, columns._locale),
    _localeParent: uniqueIndex("_posts_v_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const authors = sqliteTable(
  "authors",
  {
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    name: text("name").notNull(),
    slug: text("slug"),
    slugLock: integer("slug_lock", { mode: "boolean" }).default(true),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    authors_slug_idx: index("authors_slug_idx").on(columns.slug),
    authors_updated_at_idx: index("authors_updated_at_idx").on(
      columns.updatedAt,
    ),
    authors_created_at_idx: index("authors_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const authors_locales = sqliteTable(
  "authors_locales",
  {
    bio: text("bio"),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("authors_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [authors.id],
      name: "authors_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_jobs_log = sqliteTable(
  "payload_jobs_log",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    executedAt: text("executed_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    completedAt: text("completed_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    taskSlug: text("task_slug", {
      enum: ["inline", "schedulePublish"],
    }).notNull(),
    taskID: text("task_i_d").notNull(),
    input: text("input", { mode: "json" }),
    output: text("output", { mode: "json" }),
    state: text("state", { enum: ["failed", "succeeded"] }).notNull(),
    error: text("error", { mode: "json" }),
  },
  (columns) => ({
    _orderIdx: index("payload_jobs_log_order_idx").on(columns._order),
    _parentIDIdx: index("payload_jobs_log_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [payload_jobs.id],
      name: "payload_jobs_log_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_jobs = sqliteTable(
  "payload_jobs",
  {
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    input: text("input", { mode: "json" }),
    completedAt: text("completed_at").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    totalTried: numeric("total_tried").default("0"),
    hasError: integer("has_error", { mode: "boolean" }).default(false),
    error: text("error", { mode: "json" }),
    taskSlug: text("task_slug", { enum: ["inline", "schedulePublish"] }),
    queue: text("queue").default("default"),
    waitUntil: text("wait_until").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    processing: integer("processing", { mode: "boolean" }).default(false),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index("payload_jobs_completed_at_idx").on(
      columns.completedAt,
    ),
    payload_jobs_total_tried_idx: index("payload_jobs_total_tried_idx").on(
      columns.totalTried,
    ),
    payload_jobs_has_error_idx: index("payload_jobs_has_error_idx").on(
      columns.hasError,
    ),
    payload_jobs_task_slug_idx: index("payload_jobs_task_slug_idx").on(
      columns.taskSlug,
    ),
    payload_jobs_queue_idx: index("payload_jobs_queue_idx").on(columns.queue),
    payload_jobs_wait_until_idx: index("payload_jobs_wait_until_idx").on(
      columns.waitUntil,
    ),
    payload_jobs_processing_idx: index("payload_jobs_processing_idx").on(
      columns.processing,
    ),
    payload_jobs_updated_at_idx: index("payload_jobs_updated_at_idx").on(
      columns.updatedAt,
    ),
    payload_jobs_created_at_idx: index("payload_jobs_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const payload_locked_documents = sqliteTable(
  "payload_locked_documents",
  {
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    globalSlug: text("global_slug"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = sqliteTable(
  "payload_locked_documents_rels",
  {
    id: integer("id").primaryKey(),
    order: integer("order"),
    parent: text("parent_id").notNull(),
    path: text("path").notNull(),
    imagesID: text("images_id"),
    usersID: text("users_id"),
    postsID: text("posts_id"),
    authorsID: text("authors_id"),
    "payload-jobsID": text("payload_jobs_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_images_id_idx: index(
      "payload_locked_documents_rels_images_id_idx",
    ).on(columns.imagesID),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_posts_id_idx: index(
      "payload_locked_documents_rels_posts_id_idx",
    ).on(columns.postsID),
    payload_locked_documents_rels_authors_id_idx: index(
      "payload_locked_documents_rels_authors_id_idx",
    ).on(columns.authorsID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      "payload_locked_documents_rels_payload_jobs_id_idx",
    ).on(columns["payload-jobsID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    imagesIdFk: foreignKey({
      columns: [columns["imagesID"]],
      foreignColumns: [images.id],
      name: "payload_locked_documents_rels_images_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "payload_locked_documents_rels_posts_fk",
    }).onDelete("cascade"),
    authorsIdFk: foreignKey({
      columns: [columns["authorsID"]],
      foreignColumns: [authors.id],
      name: "payload_locked_documents_rels_authors_fk",
    }).onDelete("cascade"),
    "payload-jobsIdFk": foreignKey({
      columns: [columns["payload-jobsID"]],
      foreignColumns: [payload_jobs.id],
      name: "payload_locked_documents_rels_payload_jobs_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = sqliteTable(
  "payload_preferences",
  {
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    key: text("key"),
    value: text("value", { mode: "json" }),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = sqliteTable(
  "payload_preferences_rels",
  {
    id: integer("id").primaryKey(),
    order: integer("order"),
    parent: text("parent_id").notNull(),
    path: text("path").notNull(),
    usersID: text("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = sqliteTable(
  "payload_migrations",
  {
    id: text("id")
      .primaryKey()
      .$defaultFn(() => randomUUID()),
    name: text("name"),
    batch: numeric("batch"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const progetto_blocks_text = sqliteTable(
  "progetto_blocks_text",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "top",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("left"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("progetto_blocks_text_order_idx").on(columns._order),
    _parentIDIdx: index("progetto_blocks_text_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("progetto_blocks_text_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [progetto.id],
      name: "progetto_blocks_text_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const progetto_blocks_text_locales = sqliteTable(
  "progetto_blocks_text_locales",
  {
    content: text("content").notNull(),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "progetto_blocks_text_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [progetto_blocks_text.id],
      name: "progetto_blocks_text_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const progetto_blocks_rich_text = sqliteTable(
  "progetto_blocks_rich_text",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "top",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("left"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("progetto_blocks_rich_text_order_idx").on(columns._order),
    _parentIDIdx: index("progetto_blocks_rich_text_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("progetto_blocks_rich_text_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [progetto.id],
      name: "progetto_blocks_rich_text_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const progetto_blocks_rich_text_locales = sqliteTable(
  "progetto_blocks_rich_text_locales",
  {
    content: text("content", { mode: "json" }),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "progetto_blocks_rich_text_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [progetto_blocks_rich_text.id],
      name: "progetto_blocks_rich_text_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const progetto_blocks_quote = sqliteTable(
  "progetto_blocks_quote",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "bottom",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("right"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("progetto_blocks_quote_order_idx").on(columns._order),
    _parentIDIdx: index("progetto_blocks_quote_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("progetto_blocks_quote_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [progetto.id],
      name: "progetto_blocks_quote_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const progetto_blocks_quote_locales = sqliteTable(
  "progetto_blocks_quote_locales",
  {
    content: text("content", { mode: "json" }),
    author: text("author"),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "progetto_blocks_quote_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [progetto_blocks_quote.id],
      name: "progetto_blocks_quote_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const progetto_blocks_image = sqliteTable(
  "progetto_blocks_image",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    image: text("image_id")
      .notNull()
      .references(() => images.id, {
        onDelete: "set null",
      }),
    width: text("width", { enum: ["full", "half", "third"] }).default("full"),
    vertical: text("vertical", { enum: ["top", "center", "bottom"] }).default(
      "center",
    ),
    horizontal: text("horizontal", {
      enum: ["left", "center", "right"],
    }).default("center"),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("progetto_blocks_image_order_idx").on(columns._order),
    _parentIDIdx: index("progetto_blocks_image_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("progetto_blocks_image_path_idx").on(columns._path),
    progetto_blocks_image_image_idx: index(
      "progetto_blocks_image_image_idx",
    ).on(columns.image),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [progetto.id],
      name: "progetto_blocks_image_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const progetto_blocks_grid = sqliteTable(
  "progetto_blocks_grid",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("progetto_blocks_grid_order_idx").on(columns._order),
    _parentIDIdx: index("progetto_blocks_grid_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("progetto_blocks_grid_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [progetto.id],
      name: "progetto_blocks_grid_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const progetto_sections = sqliteTable(
  "progetto_sections",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    url: text("url").notNull(),
  },
  (columns) => ({
    _orderIdx: index("progetto_sections_order_idx").on(columns._order),
    _parentIDIdx: index("progetto_sections_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [progetto.id],
      name: "progetto_sections_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const progetto_sections_locales = sqliteTable(
  "progetto_sections_locales",
  {
    title: text("title").notNull(),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "progetto_sections_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [progetto_sections.id],
      name: "progetto_sections_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const progetto = sqliteTable("progetto", {
  id: text("id")
    .primaryKey()
    .$defaultFn(() => randomUUID()),
  updatedAt: text("updated_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
  createdAt: text("created_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
});

export const la_goccia_timeline = sqliteTable(
  "la_goccia_timeline",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    cover: text("cover_id")
      .notNull()
      .references(() => images.id, {
        onDelete: "set null",
      }),
    start: numeric("start").notNull(),
    end: numeric("end"),
  },
  (columns) => ({
    _orderIdx: index("la_goccia_timeline_order_idx").on(columns._order),
    _parentIDIdx: index("la_goccia_timeline_parent_id_idx").on(
      columns._parentID,
    ),
    la_goccia_timeline_cover_idx: index("la_goccia_timeline_cover_idx").on(
      columns.cover,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [la_goccia.id],
      name: "la_goccia_timeline_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const la_goccia_timeline_locales = sqliteTable(
  "la_goccia_timeline_locales",
  {
    title: text("title").notNull(),
    description: text("description").notNull(),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "la_goccia_timeline_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [la_goccia_timeline.id],
      name: "la_goccia_timeline_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const la_goccia = sqliteTable("la_goccia", {
  id: text("id")
    .primaryKey()
    .$defaultFn(() => randomUUID()),
  updatedAt: text("updated_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
  createdAt: text("created_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
});

export const la_goccia_locales = sqliteTable(
  "la_goccia_locales",
  {
    description: text("description").notNull(),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("la_goccia_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [la_goccia.id],
      name: "la_goccia_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const about_partners = sqliteTable(
  "about_partners",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    logo: text("logo_id").references(() => images.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("about_partners_order_idx").on(columns._order),
    _parentIDIdx: index("about_partners_parent_id_idx").on(columns._parentID),
    about_partners_logo_idx: index("about_partners_logo_idx").on(columns.logo),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [about.id],
      name: "about_partners_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const about_partners_locales = sqliteTable(
  "about_partners_locales",
  {
    name: text("name").notNull(),
    bio: text("bio").notNull(),
    members: text("members"),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      "about_partners_locales_locale_parent_id_unique",
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [about_partners.id],
      name: "about_partners_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const about = sqliteTable("about", {
  id: text("id")
    .primaryKey()
    .$defaultFn(() => randomUUID()),
  updatedAt: text("updated_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
  createdAt: text("created_at").default(
    sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
  ),
});

export const about_locales = sqliteTable(
  "about_locales",
  {
    description: text("description").notNull(),
    id: integer("id").primaryKey(),
    _locale: text("_locale", { enum: ["en", "it"] }).notNull(),
    _parentID: text("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("about_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [about.id],
      name: "about_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const relations_images_locales = relations(
  images_locales,
  ({ one }) => ({
    _parentID: one(images, {
      fields: [images_locales._parentID],
      references: [images.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_images = relations(images, ({ many }) => ({
  _locales: many(images_locales, {
    relationName: "_locales",
  }),
}));
export const relations_users_sessions = relations(
  users_sessions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_sessions._parentID],
      references: [users.id],
      relationName: "sessions",
    }),
  }),
);
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_posts_blocks_text_locales = relations(
  posts_blocks_text_locales,
  ({ one }) => ({
    _parentID: one(posts_blocks_text, {
      fields: [posts_blocks_text_locales._parentID],
      references: [posts_blocks_text.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_posts_blocks_text = relations(
  posts_blocks_text,
  ({ one, many }) => ({
    _parentID: one(posts, {
      fields: [posts_blocks_text._parentID],
      references: [posts.id],
      relationName: "_blocks_text",
    }),
    _locales: many(posts_blocks_text_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations_posts_blocks_rich_text_locales = relations(
  posts_blocks_rich_text_locales,
  ({ one }) => ({
    _parentID: one(posts_blocks_rich_text, {
      fields: [posts_blocks_rich_text_locales._parentID],
      references: [posts_blocks_rich_text.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_posts_blocks_rich_text = relations(
  posts_blocks_rich_text,
  ({ one, many }) => ({
    _parentID: one(posts, {
      fields: [posts_blocks_rich_text._parentID],
      references: [posts.id],
      relationName: "_blocks_richText",
    }),
    _locales: many(posts_blocks_rich_text_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations_posts_blocks_quote_locales = relations(
  posts_blocks_quote_locales,
  ({ one }) => ({
    _parentID: one(posts_blocks_quote, {
      fields: [posts_blocks_quote_locales._parentID],
      references: [posts_blocks_quote.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_posts_blocks_quote = relations(
  posts_blocks_quote,
  ({ one, many }) => ({
    _parentID: one(posts, {
      fields: [posts_blocks_quote._parentID],
      references: [posts.id],
      relationName: "_blocks_quote",
    }),
    _locales: many(posts_blocks_quote_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations_posts_blocks_image = relations(
  posts_blocks_image,
  ({ one }) => ({
    _parentID: one(posts, {
      fields: [posts_blocks_image._parentID],
      references: [posts.id],
      relationName: "_blocks_image",
    }),
    image: one(images, {
      fields: [posts_blocks_image.image],
      references: [images.id],
      relationName: "image",
    }),
  }),
);
export const relations_posts_blocks_grid = relations(
  posts_blocks_grid,
  ({ one }) => ({
    _parentID: one(posts, {
      fields: [posts_blocks_grid._parentID],
      references: [posts.id],
      relationName: "_blocks_grid",
    }),
  }),
);
export const relations_posts_locales = relations(posts_locales, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_locales._parentID],
    references: [posts.id],
    relationName: "_locales",
  }),
  meta_image: one(images, {
    fields: [posts_locales.meta_image],
    references: [images.id],
    relationName: "meta_image",
  }),
}));
export const relations_posts = relations(posts, ({ one, many }) => ({
  _blocks_text: many(posts_blocks_text, {
    relationName: "_blocks_text",
  }),
  _blocks_richText: many(posts_blocks_rich_text, {
    relationName: "_blocks_richText",
  }),
  _blocks_quote: many(posts_blocks_quote, {
    relationName: "_blocks_quote",
  }),
  _blocks_image: many(posts_blocks_image, {
    relationName: "_blocks_image",
  }),
  _blocks_grid: many(posts_blocks_grid, {
    relationName: "_blocks_grid",
  }),
  coverImage: one(images, {
    fields: [posts.coverImage],
    references: [images.id],
    relationName: "coverImage",
  }),
  author: one(authors, {
    fields: [posts.author],
    references: [authors.id],
    relationName: "author",
  }),
  _locales: many(posts_locales, {
    relationName: "_locales",
  }),
}));
export const relations__posts_v_blocks_text_locales = relations(
  _posts_v_blocks_text_locales,
  ({ one }) => ({
    _parentID: one(_posts_v_blocks_text, {
      fields: [_posts_v_blocks_text_locales._parentID],
      references: [_posts_v_blocks_text.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__posts_v_blocks_text = relations(
  _posts_v_blocks_text,
  ({ one, many }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_blocks_text._parentID],
      references: [_posts_v.id],
      relationName: "_blocks_text",
    }),
    _locales: many(_posts_v_blocks_text_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations__posts_v_blocks_rich_text_locales = relations(
  _posts_v_blocks_rich_text_locales,
  ({ one }) => ({
    _parentID: one(_posts_v_blocks_rich_text, {
      fields: [_posts_v_blocks_rich_text_locales._parentID],
      references: [_posts_v_blocks_rich_text.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__posts_v_blocks_rich_text = relations(
  _posts_v_blocks_rich_text,
  ({ one, many }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_blocks_rich_text._parentID],
      references: [_posts_v.id],
      relationName: "_blocks_richText",
    }),
    _locales: many(_posts_v_blocks_rich_text_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations__posts_v_blocks_quote_locales = relations(
  _posts_v_blocks_quote_locales,
  ({ one }) => ({
    _parentID: one(_posts_v_blocks_quote, {
      fields: [_posts_v_blocks_quote_locales._parentID],
      references: [_posts_v_blocks_quote.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__posts_v_blocks_quote = relations(
  _posts_v_blocks_quote,
  ({ one, many }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_blocks_quote._parentID],
      references: [_posts_v.id],
      relationName: "_blocks_quote",
    }),
    _locales: many(_posts_v_blocks_quote_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations__posts_v_blocks_image = relations(
  _posts_v_blocks_image,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_blocks_image._parentID],
      references: [_posts_v.id],
      relationName: "_blocks_image",
    }),
    image: one(images, {
      fields: [_posts_v_blocks_image.image],
      references: [images.id],
      relationName: "image",
    }),
  }),
);
export const relations__posts_v_blocks_grid = relations(
  _posts_v_blocks_grid,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_blocks_grid._parentID],
      references: [_posts_v.id],
      relationName: "_blocks_grid",
    }),
  }),
);
export const relations__posts_v_locales = relations(
  _posts_v_locales,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_locales._parentID],
      references: [_posts_v.id],
      relationName: "_locales",
    }),
    version_meta_image: one(images, {
      fields: [_posts_v_locales.version_meta_image],
      references: [images.id],
      relationName: "version_meta_image",
    }),
  }),
);
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: "parent",
  }),
  _blocks_text: many(_posts_v_blocks_text, {
    relationName: "_blocks_text",
  }),
  _blocks_richText: many(_posts_v_blocks_rich_text, {
    relationName: "_blocks_richText",
  }),
  _blocks_quote: many(_posts_v_blocks_quote, {
    relationName: "_blocks_quote",
  }),
  _blocks_image: many(_posts_v_blocks_image, {
    relationName: "_blocks_image",
  }),
  _blocks_grid: many(_posts_v_blocks_grid, {
    relationName: "_blocks_grid",
  }),
  version_coverImage: one(images, {
    fields: [_posts_v.version_coverImage],
    references: [images.id],
    relationName: "version_coverImage",
  }),
  version_author: one(authors, {
    fields: [_posts_v.version_author],
    references: [authors.id],
    relationName: "version_author",
  }),
  _locales: many(_posts_v_locales, {
    relationName: "_locales",
  }),
}));
export const relations_authors_locales = relations(
  authors_locales,
  ({ one }) => ({
    _parentID: one(authors, {
      fields: [authors_locales._parentID],
      references: [authors.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_authors = relations(authors, ({ many }) => ({
  _locales: many(authors_locales, {
    relationName: "_locales",
  }),
}));
export const relations_payload_jobs_log = relations(
  payload_jobs_log,
  ({ one }) => ({
    _parentID: one(payload_jobs, {
      fields: [payload_jobs_log._parentID],
      references: [payload_jobs.id],
      relationName: "log",
    }),
  }),
);
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: "log",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    imagesID: one(images, {
      fields: [payload_locked_documents_rels.imagesID],
      references: [images.id],
      relationName: "images",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: "posts",
    }),
    authorsID: one(authors, {
      fields: [payload_locked_documents_rels.authorsID],
      references: [authors.id],
      relationName: "authors",
    }),
    "payload-jobsID": one(payload_jobs, {
      fields: [payload_locked_documents_rels["payload-jobsID"]],
      references: [payload_jobs.id],
      relationName: "payload-jobs",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);
export const relations_progetto_blocks_text_locales = relations(
  progetto_blocks_text_locales,
  ({ one }) => ({
    _parentID: one(progetto_blocks_text, {
      fields: [progetto_blocks_text_locales._parentID],
      references: [progetto_blocks_text.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_progetto_blocks_text = relations(
  progetto_blocks_text,
  ({ one, many }) => ({
    _parentID: one(progetto, {
      fields: [progetto_blocks_text._parentID],
      references: [progetto.id],
      relationName: "_blocks_text",
    }),
    _locales: many(progetto_blocks_text_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations_progetto_blocks_rich_text_locales = relations(
  progetto_blocks_rich_text_locales,
  ({ one }) => ({
    _parentID: one(progetto_blocks_rich_text, {
      fields: [progetto_blocks_rich_text_locales._parentID],
      references: [progetto_blocks_rich_text.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_progetto_blocks_rich_text = relations(
  progetto_blocks_rich_text,
  ({ one, many }) => ({
    _parentID: one(progetto, {
      fields: [progetto_blocks_rich_text._parentID],
      references: [progetto.id],
      relationName: "_blocks_richText",
    }),
    _locales: many(progetto_blocks_rich_text_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations_progetto_blocks_quote_locales = relations(
  progetto_blocks_quote_locales,
  ({ one }) => ({
    _parentID: one(progetto_blocks_quote, {
      fields: [progetto_blocks_quote_locales._parentID],
      references: [progetto_blocks_quote.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_progetto_blocks_quote = relations(
  progetto_blocks_quote,
  ({ one, many }) => ({
    _parentID: one(progetto, {
      fields: [progetto_blocks_quote._parentID],
      references: [progetto.id],
      relationName: "_blocks_quote",
    }),
    _locales: many(progetto_blocks_quote_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations_progetto_blocks_image = relations(
  progetto_blocks_image,
  ({ one }) => ({
    _parentID: one(progetto, {
      fields: [progetto_blocks_image._parentID],
      references: [progetto.id],
      relationName: "_blocks_image",
    }),
    image: one(images, {
      fields: [progetto_blocks_image.image],
      references: [images.id],
      relationName: "image",
    }),
  }),
);
export const relations_progetto_blocks_grid = relations(
  progetto_blocks_grid,
  ({ one }) => ({
    _parentID: one(progetto, {
      fields: [progetto_blocks_grid._parentID],
      references: [progetto.id],
      relationName: "_blocks_grid",
    }),
  }),
);
export const relations_progetto_sections_locales = relations(
  progetto_sections_locales,
  ({ one }) => ({
    _parentID: one(progetto_sections, {
      fields: [progetto_sections_locales._parentID],
      references: [progetto_sections.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_progetto_sections = relations(
  progetto_sections,
  ({ one, many }) => ({
    _parentID: one(progetto, {
      fields: [progetto_sections._parentID],
      references: [progetto.id],
      relationName: "sections",
    }),
    _locales: many(progetto_sections_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations_progetto = relations(progetto, ({ many }) => ({
  _blocks_text: many(progetto_blocks_text, {
    relationName: "_blocks_text",
  }),
  _blocks_richText: many(progetto_blocks_rich_text, {
    relationName: "_blocks_richText",
  }),
  _blocks_quote: many(progetto_blocks_quote, {
    relationName: "_blocks_quote",
  }),
  _blocks_image: many(progetto_blocks_image, {
    relationName: "_blocks_image",
  }),
  _blocks_grid: many(progetto_blocks_grid, {
    relationName: "_blocks_grid",
  }),
  sections: many(progetto_sections, {
    relationName: "sections",
  }),
}));
export const relations_la_goccia_timeline_locales = relations(
  la_goccia_timeline_locales,
  ({ one }) => ({
    _parentID: one(la_goccia_timeline, {
      fields: [la_goccia_timeline_locales._parentID],
      references: [la_goccia_timeline.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_la_goccia_timeline = relations(
  la_goccia_timeline,
  ({ one, many }) => ({
    _parentID: one(la_goccia, {
      fields: [la_goccia_timeline._parentID],
      references: [la_goccia.id],
      relationName: "timeline",
    }),
    _locales: many(la_goccia_timeline_locales, {
      relationName: "_locales",
    }),
    cover: one(images, {
      fields: [la_goccia_timeline.cover],
      references: [images.id],
      relationName: "cover",
    }),
  }),
);
export const relations_la_goccia_locales = relations(
  la_goccia_locales,
  ({ one }) => ({
    _parentID: one(la_goccia, {
      fields: [la_goccia_locales._parentID],
      references: [la_goccia.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_la_goccia = relations(la_goccia, ({ many }) => ({
  timeline: many(la_goccia_timeline, {
    relationName: "timeline",
  }),
  _locales: many(la_goccia_locales, {
    relationName: "_locales",
  }),
}));
export const relations_about_partners_locales = relations(
  about_partners_locales,
  ({ one }) => ({
    _parentID: one(about_partners, {
      fields: [about_partners_locales._parentID],
      references: [about_partners.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_about_partners = relations(
  about_partners,
  ({ one, many }) => ({
    _parentID: one(about, {
      fields: [about_partners._parentID],
      references: [about.id],
      relationName: "partners",
    }),
    _locales: many(about_partners_locales, {
      relationName: "_locales",
    }),
    logo: one(images, {
      fields: [about_partners.logo],
      references: [images.id],
      relationName: "logo",
    }),
  }),
);
export const relations_about_locales = relations(about_locales, ({ one }) => ({
  _parentID: one(about, {
    fields: [about_locales._parentID],
    references: [about.id],
    relationName: "_locales",
  }),
}));
export const relations_about = relations(about, ({ many }) => ({
  partners: many(about_partners, {
    relationName: "partners",
  }),
  _locales: many(about_locales, {
    relationName: "_locales",
  }),
}));

type DatabaseSchema = {
  images: typeof images;
  images_locales: typeof images_locales;
  users_sessions: typeof users_sessions;
  users: typeof users;
  posts_blocks_text: typeof posts_blocks_text;
  posts_blocks_text_locales: typeof posts_blocks_text_locales;
  posts_blocks_rich_text: typeof posts_blocks_rich_text;
  posts_blocks_rich_text_locales: typeof posts_blocks_rich_text_locales;
  posts_blocks_quote: typeof posts_blocks_quote;
  posts_blocks_quote_locales: typeof posts_blocks_quote_locales;
  posts_blocks_image: typeof posts_blocks_image;
  posts_blocks_grid: typeof posts_blocks_grid;
  posts: typeof posts;
  posts_locales: typeof posts_locales;
  _posts_v_blocks_text: typeof _posts_v_blocks_text;
  _posts_v_blocks_text_locales: typeof _posts_v_blocks_text_locales;
  _posts_v_blocks_rich_text: typeof _posts_v_blocks_rich_text;
  _posts_v_blocks_rich_text_locales: typeof _posts_v_blocks_rich_text_locales;
  _posts_v_blocks_quote: typeof _posts_v_blocks_quote;
  _posts_v_blocks_quote_locales: typeof _posts_v_blocks_quote_locales;
  _posts_v_blocks_image: typeof _posts_v_blocks_image;
  _posts_v_blocks_grid: typeof _posts_v_blocks_grid;
  _posts_v: typeof _posts_v;
  _posts_v_locales: typeof _posts_v_locales;
  authors: typeof authors;
  authors_locales: typeof authors_locales;
  payload_jobs_log: typeof payload_jobs_log;
  payload_jobs: typeof payload_jobs;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  progetto_blocks_text: typeof progetto_blocks_text;
  progetto_blocks_text_locales: typeof progetto_blocks_text_locales;
  progetto_blocks_rich_text: typeof progetto_blocks_rich_text;
  progetto_blocks_rich_text_locales: typeof progetto_blocks_rich_text_locales;
  progetto_blocks_quote: typeof progetto_blocks_quote;
  progetto_blocks_quote_locales: typeof progetto_blocks_quote_locales;
  progetto_blocks_image: typeof progetto_blocks_image;
  progetto_blocks_grid: typeof progetto_blocks_grid;
  progetto_sections: typeof progetto_sections;
  progetto_sections_locales: typeof progetto_sections_locales;
  progetto: typeof progetto;
  la_goccia_timeline: typeof la_goccia_timeline;
  la_goccia_timeline_locales: typeof la_goccia_timeline_locales;
  la_goccia: typeof la_goccia;
  la_goccia_locales: typeof la_goccia_locales;
  about_partners: typeof about_partners;
  about_partners_locales: typeof about_partners_locales;
  about: typeof about;
  about_locales: typeof about_locales;
  relations_images_locales: typeof relations_images_locales;
  relations_images: typeof relations_images;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_posts_blocks_text_locales: typeof relations_posts_blocks_text_locales;
  relations_posts_blocks_text: typeof relations_posts_blocks_text;
  relations_posts_blocks_rich_text_locales: typeof relations_posts_blocks_rich_text_locales;
  relations_posts_blocks_rich_text: typeof relations_posts_blocks_rich_text;
  relations_posts_blocks_quote_locales: typeof relations_posts_blocks_quote_locales;
  relations_posts_blocks_quote: typeof relations_posts_blocks_quote;
  relations_posts_blocks_image: typeof relations_posts_blocks_image;
  relations_posts_blocks_grid: typeof relations_posts_blocks_grid;
  relations_posts_locales: typeof relations_posts_locales;
  relations_posts: typeof relations_posts;
  relations__posts_v_blocks_text_locales: typeof relations__posts_v_blocks_text_locales;
  relations__posts_v_blocks_text: typeof relations__posts_v_blocks_text;
  relations__posts_v_blocks_rich_text_locales: typeof relations__posts_v_blocks_rich_text_locales;
  relations__posts_v_blocks_rich_text: typeof relations__posts_v_blocks_rich_text;
  relations__posts_v_blocks_quote_locales: typeof relations__posts_v_blocks_quote_locales;
  relations__posts_v_blocks_quote: typeof relations__posts_v_blocks_quote;
  relations__posts_v_blocks_image: typeof relations__posts_v_blocks_image;
  relations__posts_v_blocks_grid: typeof relations__posts_v_blocks_grid;
  relations__posts_v_locales: typeof relations__posts_v_locales;
  relations__posts_v: typeof relations__posts_v;
  relations_authors_locales: typeof relations_authors_locales;
  relations_authors: typeof relations_authors;
  relations_payload_jobs_log: typeof relations_payload_jobs_log;
  relations_payload_jobs: typeof relations_payload_jobs;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_progetto_blocks_text_locales: typeof relations_progetto_blocks_text_locales;
  relations_progetto_blocks_text: typeof relations_progetto_blocks_text;
  relations_progetto_blocks_rich_text_locales: typeof relations_progetto_blocks_rich_text_locales;
  relations_progetto_blocks_rich_text: typeof relations_progetto_blocks_rich_text;
  relations_progetto_blocks_quote_locales: typeof relations_progetto_blocks_quote_locales;
  relations_progetto_blocks_quote: typeof relations_progetto_blocks_quote;
  relations_progetto_blocks_image: typeof relations_progetto_blocks_image;
  relations_progetto_blocks_grid: typeof relations_progetto_blocks_grid;
  relations_progetto_sections_locales: typeof relations_progetto_sections_locales;
  relations_progetto_sections: typeof relations_progetto_sections;
  relations_progetto: typeof relations_progetto;
  relations_la_goccia_timeline_locales: typeof relations_la_goccia_timeline_locales;
  relations_la_goccia_timeline: typeof relations_la_goccia_timeline;
  relations_la_goccia_locales: typeof relations_la_goccia_locales;
  relations_la_goccia: typeof relations_la_goccia;
  relations_about_partners_locales: typeof relations_about_partners_locales;
  relations_about_partners: typeof relations_about_partners;
  relations_about_locales: typeof relations_about_locales;
  relations_about: typeof relations_about;
};

declare module "@payloadcms/db-sqlite" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
