/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-vercel-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  uuid,
  varchar,
  timestamp,
  numeric,
  jsonb,
  boolean,
  serial,
  integer,
} from "@payloadcms/db-vercel-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-vercel-postgres/drizzle";

export const images = pgTable(
  "images",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    caption: varchar("caption").notNull(),
    blurHash: varchar("blur_hash"),
    prefix: varchar("prefix").default("images"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
    sizes_thumbnail_url: varchar("sizes_thumbnail_url"),
    sizes_thumbnail_width: numeric("sizes_thumbnail_width"),
    sizes_thumbnail_height: numeric("sizes_thumbnail_height"),
    sizes_thumbnail_mimeType: varchar("sizes_thumbnail_mime_type"),
    sizes_thumbnail_filesize: numeric("sizes_thumbnail_filesize"),
    sizes_thumbnail_filename: varchar("sizes_thumbnail_filename"),
    sizes_medium_url: varchar("sizes_medium_url"),
    sizes_medium_width: numeric("sizes_medium_width"),
    sizes_medium_height: numeric("sizes_medium_height"),
    sizes_medium_mimeType: varchar("sizes_medium_mime_type"),
    sizes_medium_filesize: numeric("sizes_medium_filesize"),
    sizes_medium_filename: varchar("sizes_medium_filename"),
    sizes_large_url: varchar("sizes_large_url"),
    sizes_large_width: numeric("sizes_large_width"),
    sizes_large_height: numeric("sizes_large_height"),
    sizes_large_mimeType: varchar("sizes_large_mime_type"),
    sizes_large_filesize: numeric("sizes_large_filesize"),
    sizes_large_filename: varchar("sizes_large_filename"),
    sizes_xlarge_url: varchar("sizes_xlarge_url"),
    sizes_xlarge_width: numeric("sizes_xlarge_width"),
    sizes_xlarge_height: numeric("sizes_xlarge_height"),
    sizes_xlarge_mimeType: varchar("sizes_xlarge_mime_type"),
    sizes_xlarge_filesize: numeric("sizes_xlarge_filesize"),
    sizes_xlarge_filename: varchar("sizes_xlarge_filename"),
    sizes_og_url: varchar("sizes_og_url"),
    sizes_og_width: numeric("sizes_og_width"),
    sizes_og_height: numeric("sizes_og_height"),
    sizes_og_mimeType: varchar("sizes_og_mime_type"),
    sizes_og_filesize: numeric("sizes_og_filesize"),
    sizes_og_filename: varchar("sizes_og_filename"),
  },
  (columns) => ({
    images_updated_at_idx: index("images_updated_at_idx").on(columns.updatedAt),
    images_created_at_idx: index("images_created_at_idx").on(columns.createdAt),
    images_filename_idx: uniqueIndex("images_filename_idx").on(
      columns.filename,
    ),
    images_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      "images_sizes_thumbnail_sizes_thumbnail_filename_idx",
    ).on(columns.sizes_thumbnail_filename),
    images_sizes_medium_sizes_medium_filename_idx: index(
      "images_sizes_medium_sizes_medium_filename_idx",
    ).on(columns.sizes_medium_filename),
    images_sizes_large_sizes_large_filename_idx: index(
      "images_sizes_large_sizes_large_filename_idx",
    ).on(columns.sizes_large_filename),
    images_sizes_xlarge_sizes_xlarge_filename_idx: index(
      "images_sizes_xlarge_sizes_xlarge_filename_idx",
    ).on(columns.sizes_xlarge_filename),
    images_sizes_og_sizes_og_filename_idx: index(
      "images_sizes_og_sizes_og_filename_idx",
    ).on(columns.sizes_og_filename),
  }),
);

export const users = pgTable(
  "users",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const posts = pgTable(
  "posts",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    title: varchar("title").notNull(),
    description: varchar("description").notNull(),
    content: jsonb("content").notNull(),
    coverImage: uuid("cover_image_id")
      .notNull()
      .references(() => images.id, {
        onDelete: "set null",
      }),
    author: uuid("author_id")
      .notNull()
      .references(() => authors.id, {
        onDelete: "set null",
      }),
    slug: varchar("slug"),
    slugLock: boolean("slug_lock").default(true),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    posts_cover_image_idx: index("posts_cover_image_idx").on(
      columns.coverImage,
    ),
    posts_author_idx: index("posts_author_idx").on(columns.author),
    posts_slug_idx: index("posts_slug_idx").on(columns.slug),
    posts_updated_at_idx: index("posts_updated_at_idx").on(columns.updatedAt),
    posts_created_at_idx: index("posts_created_at_idx").on(columns.createdAt),
  }),
);

export const authors = pgTable(
  "authors",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name").notNull(),
    slug: varchar("slug"),
    slugLock: boolean("slug_lock").default(true),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    authors_slug_idx: index("authors_slug_idx").on(columns.slug),
    authors_updated_at_idx: index("authors_updated_at_idx").on(
      columns.updatedAt,
    ),
    authors_created_at_idx: index("authors_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    imagesID: uuid("images_id"),
    usersID: uuid("users_id"),
    postsID: uuid("posts_id"),
    authorsID: uuid("authors_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_images_id_idx: index(
      "payload_locked_documents_rels_images_id_idx",
    ).on(columns.imagesID),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_posts_id_idx: index(
      "payload_locked_documents_rels_posts_id_idx",
    ).on(columns.postsID),
    payload_locked_documents_rels_authors_id_idx: index(
      "payload_locked_documents_rels_authors_id_idx",
    ).on(columns.authorsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    imagesIdFk: foreignKey({
      columns: [columns["imagesID"]],
      foreignColumns: [images.id],
      name: "payload_locked_documents_rels_images_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "payload_locked_documents_rels_posts_fk",
    }).onDelete("cascade"),
    authorsIdFk: foreignKey({
      columns: [columns["authorsID"]],
      foreignColumns: [authors.id],
      name: "payload_locked_documents_rels_authors_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: uuid("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const about_partners = pgTable(
  "about_partners",
  {
    _order: integer("_order").notNull(),
    _parentID: uuid("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    bio: varchar("bio").notNull(),
    logo: uuid("logo_id").references(() => images.id, {
      onDelete: "set null",
    }),
    members: varchar("members"),
  },
  (columns) => ({
    _orderIdx: index("about_partners_order_idx").on(columns._order),
    _parentIDIdx: index("about_partners_parent_id_idx").on(columns._parentID),
    about_partners_logo_idx: index("about_partners_logo_idx").on(columns.logo),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [about.id],
      name: "about_partners_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const about = pgTable("about", {
  id: uuid("id").defaultRandom().primaryKey(),
  description: varchar("description")
    .notNull()
    .default(
      "La Cordata di progetto è guidata dal Comune di Milano e composta da Ambiente Italia Srl, Climateflux GmbH, Eutropian Association, FROM, Open Impact, Osservatorio La Goccia, Politecnico di Milano.",
    ),
  updatedAt: timestamp("updated_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp("created_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
});

export const goccia_timeline = pgTable(
  "goccia_timeline",
  {
    _order: integer("_order").notNull(),
    _parentID: uuid("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").notNull(),
    description: varchar("description").notNull(),
    cover: uuid("cover_id")
      .notNull()
      .references(() => images.id, {
        onDelete: "set null",
      }),
    start: numeric("start").notNull(),
    end: numeric("end"),
  },
  (columns) => ({
    _orderIdx: index("goccia_timeline_order_idx").on(columns._order),
    _parentIDIdx: index("goccia_timeline_parent_id_idx").on(columns._parentID),
    goccia_timeline_cover_idx: index("goccia_timeline_cover_idx").on(
      columns.cover,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [goccia.id],
      name: "goccia_timeline_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const goccia = pgTable("goccia", {
  id: uuid("id").defaultRandom().primaryKey(),
  description: varchar("description")
    .notNull()
    .default(
      "Nata come area industriale tra fine Ottocento e inizio Novecento, poi dismessa e abbandonata tra gli anni ‘70 e ‘90, la Goccia è oggi è al centro di progetti di rigenerazione che intrecciano memoria industriale, ambiente e futuro urbano.",
    ),
  updatedAt: timestamp("updated_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp("created_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
});

export const relations_images = relations(images, () => ({}));
export const relations_users = relations(users, () => ({}));
export const relations_posts = relations(posts, ({ one }) => ({
  coverImage: one(images, {
    fields: [posts.coverImage],
    references: [images.id],
    relationName: "coverImage",
  }),
  author: one(authors, {
    fields: [posts.author],
    references: [authors.id],
    relationName: "author",
  }),
}));
export const relations_authors = relations(authors, () => ({}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    imagesID: one(images, {
      fields: [payload_locked_documents_rels.imagesID],
      references: [images.id],
      relationName: "images",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: "posts",
    }),
    authorsID: one(authors, {
      fields: [payload_locked_documents_rels.authorsID],
      references: [authors.id],
      relationName: "authors",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);
export const relations_about_partners = relations(
  about_partners,
  ({ one }) => ({
    _parentID: one(about, {
      fields: [about_partners._parentID],
      references: [about.id],
      relationName: "partners",
    }),
    logo: one(images, {
      fields: [about_partners.logo],
      references: [images.id],
      relationName: "logo",
    }),
  }),
);
export const relations_about = relations(about, ({ many }) => ({
  partners: many(about_partners, {
    relationName: "partners",
  }),
}));
export const relations_goccia_timeline = relations(
  goccia_timeline,
  ({ one }) => ({
    _parentID: one(goccia, {
      fields: [goccia_timeline._parentID],
      references: [goccia.id],
      relationName: "timeline",
    }),
    cover: one(images, {
      fields: [goccia_timeline.cover],
      references: [images.id],
      relationName: "cover",
    }),
  }),
);
export const relations_goccia = relations(goccia, ({ many }) => ({
  timeline: many(goccia_timeline, {
    relationName: "timeline",
  }),
}));

type DatabaseSchema = {
  images: typeof images;
  users: typeof users;
  posts: typeof posts;
  authors: typeof authors;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  about_partners: typeof about_partners;
  about: typeof about;
  goccia_timeline: typeof goccia_timeline;
  goccia: typeof goccia;
  relations_images: typeof relations_images;
  relations_users: typeof relations_users;
  relations_posts: typeof relations_posts;
  relations_authors: typeof relations_authors;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_about_partners: typeof relations_about_partners;
  relations_about: typeof relations_about;
  relations_goccia_timeline: typeof relations_goccia_timeline;
  relations_goccia: typeof relations_goccia;
};

declare module "@payloadcms/db-vercel-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
